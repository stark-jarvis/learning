"=========================================
"
" MacVim & Terminal Vim Config
"
"=========================================

"======================
"首次安装使用
"======================
"Vim-Plug的首次下载安装
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"======================
" 一些设置
"======================
set nocompatible
" 处理consle输出乱码
language messages zh_CN.utf-8

" 帮助文件中文显示
set helplang=cn

" 设置文件的编码
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,chinese,cp936

" 自动最大化窗口
if has('gui_running')
	au GUIEnter * winpos 0 0
	set lines=500 columns=999
endif

" ===========
" 代码相关设置
" ===========
syntax enable "打开语法高亮
syntax on "打开语法高亮
set showmatch "显示括号配对情况
set smartindent "智能对齐
" 每级缩进设置为空格
set shiftwidth=4
set expandtab "注释后，Tab不为四个空格，为一个制表键
set tabstop=4 " 制表符
set softtabstop=-1
set autoindent " 缩进，启动一个新行时使用与前一行一样的缩进
"set smartindent
"set guifont=Source_Code_Pro:h15 " 设置字体
set guifont=Monaco:h15 " 设置字体

" 当前文件未保存时，vim不允许跳到另外的窗口
" 设置后，未保存文件会放在缓冲区，关闭vim时会提醒有未保存文件
set hidden
" 备份和缓存
set undofile
set noundofile
set nobackup
set noswapfile
set nowritebackup

" 使vim响应更快
set updatetime=100

" 补全时显示的窗口少显示信息
set shortmess+=c

" 显示行号
set number

" 行号左边栏一直显示
"if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  "set signcolumn=number
"else
  set signcolumn=yes
"endif

" 自动改变当前目录
set autochdir
" 文件有改动时自动载入
"set autoread
" 自动保存
set autowrite

" 状态栏显示目前所执行的指令
set showcmd

" 只显示菜单，影响到顶部tab显示的样式
"set guioptions=mcr

" 隐藏工具栏和左侧滑动条
set guioptions=aAce

" For MacVim
"if  has('gui_running')
    set cursorline " 高亮光标所在的行
    set cursorcolumn " 高亮光标所在的列
"endif

" 修改触发补全选择键<Shift + Space>
" 修改触发补全选择键：使用回车键
"inoremap <silent><expr> <S-Space>
inoremap <silent><expr> <D-j>
      \ pumvisible() ? "\<C-n>" :
      "\ <SID>check_back_space() ? "\<S-Space>" :
      \ <SID>check_back_space() ? "\<D-j>" :
      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" 上面有定义了
"function! s:check_back_space() abort
  "let col = col('.') - 1
  "return !col || getline('.')[col - 1]  =~# '\s'
"endfunction

" Use <c-space> to trigger completion.
  " 使用Ctrl+Space 触发显示自动补全窗口
  "inoremap <silent><expr> <c-space> coc#refresh()
  " 使用 Ctrl+o 触发显示自动补全窗口
  inoremap <silent><expr> <C-o> coc#refresh()


" 上下显示代码报错的位置
nmap <silent> <leader>= <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>- <Plug>(coc-diagnostic-next)


"======================
" 皮肤配色设置
"======================
"colorscheme desert 
"colorscheme molokai
"colorscheme moria
colorscheme zenburn
"colorscheme void

"if has('gui_running') 
    "colorscheme moria
"endif


"======================
" 自定义映射
"======================
" 定义<leader>为逗号
let mapleader=","
let maplocalleader=","

"插入系统时间
"nnoremap <leader>da :%s/\$ModifiedTime\$/\=strftime("%Y-%m-%dT%H:%M:%S+0800")/g<cr>
" 插入年份
"nnoremap <leader>dy :%s/$CurrentYear/\=strftime("%Y")/g<cr>

"======================
" tab 快捷键
"======================
nnoremap <D-t> :tabnew<cr>
nnoremap <leader>t :tabnew<cr>
nnoremap <C-p> :tabprevious<cr>
nnoremap <C-n> :tabnext<cr>
nnoremap <C-k> :tabclose!<cr>
nnoremap <C-d> :nohl<cr>

"===========================
"查找/替换相关的设置
"===========================
" 高亮显示查找结果
set hlsearch 
" 高亮显示搜索的匹配过程，每输入一个字符，就自动跳到第一个匹配的结果
set incsearch "增量查找

"===========================
"状态栏的设置
"===========================
set cmdheight=1
"set ls=2 " 始终显示状态行
set laststatus=2 " 始终显示状态行
set wildmenu " 命令行补全以增强模式运行
"set statusline=[%F]%y%r%m%*%=[%{&ormat}][Line:%l/%L,Column:%c][%p%%] "显示文件名，文件格式，总行数，总的字符数
"set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ [%{(&fenc==\"\"?&enc:&fenc).(&bomb?\",BOM\":\"\")}]\ %c:%l/%L%)
set statusline=[%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}]%<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ [%{(&fenc==\"\"?&enc:&fenc).(&bomb?\",BOM\":\"\")}]\ %c:%l/%L%)

"set statusline^=%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
" 设置在状态行显示的信息
" set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&ormat}\ [%{(&fenc==\"\"?&enc:&fenc).(&bomb?\",BOM\":\"\")}]\ %c:%l/%L%)
set ruler "在编辑过程中，在右下角显示光标位置的状态行

" 插入模式下上下左右移动光标
inoremap <c-h> <left>
inoremap <c-l> <right>
inoremap <c-j> <c-o>gj
inoremap <c-k> <c-o>gk
"inoremap <shift> <c-u>
" 自动补全括号与引号
:inoremap ( ()<ESC>i
:inoremap { {}<ESC>i
:inoremap [ []<ESC>i
:inoremap ' ''<ESC>i
:inoremap " ""<ESC>i
:inoremap < <><ESC>i
:inoremap ` ``<ESC>i

      
       
"======================
" 保存与退出文件
"======================
noremap <leader>s :w!<cr>
noremap <leader>q :q!<cr>

"======================
" 打开与保存vimrc配置
"======================
nnoremap <leader>e :tabnew $HOME/.vim/vimrc<cr>
nnoremap <leader>se :source $HOME/.vim/vimrc<cr>

"======================
" 打开与CocConfig配置
"======================
nnoremap <leader>cj :tabnew $HOME/.vim/coc-settings.json<cr>

"======================
" 插件快捷键重定义
"======================
nnoremap <leader>h :MRU<cr>
nnoremap <leader>a :NERDTree<cr>
nnoremap <leader>b :BookmarkToRoot 
nnoremap <leader>m :NERDTreeToggle<cr>
nnoremap <leader>f :vimgrep /
nnoremap <leader>g :grep 
nnoremap <leader>o :cw<cr>
nnoremap <leader>n :cn<cr>

" 搜索光标下单词并找开quickfix
"nnoremap <leader>f yiw:vimgrep /<C-R>0/ %<CR>:copen<CR>

"======================
" vim-plug 插件 start
"======================
call plug#begin('~/.vim/autoload/plugged')

" Coc.nvim插件，推荐使用release版本
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" 记录最近打开的文件
Plug 'yegappan/mru'

" 左侧文件列表
Plug 'scrooloose/nerdtree'

" 成对的符号
Plug 'tpope/vim-surround'

" 代码片段
Plug 'honza/vim-snippets'

" 快速注释与去掉注释
Plug 'scrooloose/nerdcommenter'

" ES6语法相关
Plug 'isRuslan/vim-es6'

" 带有 C 样式行 (//) 和块 (/* */) 注释的 JSON 的 Vim 语法高亮插件。
Plug 'kevinoid/vim-jsonc'

" 中文帮助文件
Plug 'yianwillis/vimcdoc'

call plug#end()
" vim-plug 插件 end
"======================

" ====================================
" Plugin coc.nvim
" ====================================
" 指定当前环境NodeJs执行程序所在目录，可以使用which node查看
let g:coc_node_path='/Users/weiko/.nvm/versions/node/v10.16.0/bin/node'
" 常用的coc插件可以在这里指定，若没有安装的插件会自动安装
let g:coc_global_extensions = [
    \ 'coc-tsserver',
    \ 'coc-css',
    \ 'coc-html',
    \ 'coc-vimlsp',
    \ 'coc-snippets',
    \ 'coc-git']

" For vim-jsonc插件
autocmd FileType json syntax match Comment +\/\/.\+$+

" For coc-css 将 @ 添加到 iskeyword 选项
autocmd FileType scss setl iskeyword+=@-@

" For coc-snippets
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
let g:coc_snippet_next = '<tab>'

" For coc-git refresh statusline 
autocmd User CocGitStatusChange {:CocCommand git.refresh}

" 使用回车确定当前补全项
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Enable omni completion.
autocmd FileType css,wxss setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,wxml,phtml,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

" ====================================
" plugin - mru.vim 记录最近打开的文件
" ====================================
"记录历史文件的位置
let MRU_File=$HOME."/.vim/_vim_mru_files"
"记录的条数
let MRU_Max_Entries = 50
"分割窗口的大小
let MRU_Window_Height=10
"选择文件后打开此窗口自动关闭
let MRU_Auto_Close=1
let MRU_Add_Menu = 0
